[{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html","id":"load-data-and-package-","dir":"Articles","previous_headings":"","what":"Load data and package.","title":"Local Indicators of Spatial Association(LISA)","text":"use gzma data tidyrgeoda package,details see ?gzma.","code":"library(sf) library(dplyr) library(ggplot2) library(tidyrgeoda)  data(gzma) head(gzma) ## Simple feature collection with 6 features and 32 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 12605340 ymin: 2645065 xmax: 12614330 ymax: 2653022 ## Projected CRS: Popular Visualisation CRS / Mercator ## # A tibble: 6 × 33 ##   SName_EN       DName_EN SSQ_Score PS_Score EL_Score OH_Score IL_Score FPOP_Pro ##   <chr>          <chr>        <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> ## 1 Datang Subdis… Yuexiu …      43.5     7.21     4.64     4.75     2.64    0.202 ## 2 Kuangquan Sub… Yuexiu …      29.3     3.55     3.81     3.91     4.06    0.716 ## 3 Dadong Subdis… Yuexiu …      51.2     7.94     4.69     4.86     3.31    0.215 ## 4 Donghu Subdis… Yuexiu …      57.0     8.22     4.93     4.92     3.74    0.178 ## 5 Baiyun Subdis… Yuexiu …      60.4     7.84     4.74     4.98     4.69    0.300 ## 6 Huale Subdist… Yuexiu …      59.3     8.12     5.13     4.98     3.92    0.231 ## # ℹ 25 more variables: TenantsPro <dbl>, NoSchPro <dbl>, PSchPRO <dbl>, ## #   JHSchPro <dbl>, HSchDipPro <dbl>, CDegreePro <dbl>, UnderG_Pro <dbl>, ## #   PostG_Pro <dbl>, RPSOPMOPro <dbl>, PCE_Pro <dbl>, ProTechPro <dbl>, ## #   ClerkPro <dbl>, BusSer_Pro <dbl>, AFAFP_Pro <dbl>, OPTE_Pro <dbl>, ## #   UnemPeoPro <dbl>, B100_Pro <dbl>, `100_200Pro` <dbl>, `200_500Pro` <dbl>, ## #   `500_1000P` <dbl>, `1000_1500P` <dbl>, `1500_2000P` <dbl>, ## #   `2000_3000P` <dbl>, A3000_Pro <dbl>, geometry <POLYGON [m]>"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html","id":"local-moran","dir":"Articles","previous_headings":"","what":"Local Moran","title":"Local Indicators of Spatial Association(LISA)","text":"local Moran statistic suggested Anselin(1995) way identify local clusters local spaital outliers. global spatial autocorrelation can expressed double sum \\(\\) \\(j\\) indices, \\(\\sum_i\\sum_j g_{ij}\\).local form statistic , observation(location)\\(\\), sum relevant expression \\(j\\) index, \\(\\sum_j g_{ij}\\). Specifically, local Moran statistic takes form \\(cz_i\\sum_j \\omega_{ij}z_j\\), \\(z\\) deviations mean. scalar c locations therefore play role assessment significance. latter obtained means conditional permutation method, , turn, \\(z_i\\) held fixed, remaining z-values randomly permuted yield reference distribution statistic. operates fashion global Moran’s , except permutation carried observation turn. result pseudo p-value location, can used assess significance. Note notion significance standard one, interpreted way (see discussion multiple comparisons ). Assessing significance useful Local Moran. However, indication significance combined location observation Moran Scatterplot, powerful interpretation becomes possible. combined information allows classification significant locations high-high low-low spatial clusters, high-low low-high spatial outliers. important keep mind reference high low relative mean variable, interpreted absolute sense. Now,use SSQ_Score gzma data example: significance level 0.05:  significance level 0.01:  Bivariate Local Moran Statistics","code":"gzma %>%    mutate(lisa = st_local_moran(.,'SSQ_Score',                                wt = st_contiguity_weights(.),                                significance_cutoff = 0.05)) %>%    select(lisa) %>%    ggplot() +   geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'LISA95') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   ) gzma %>%    mutate(lisa = st_local_moran(.,'SSQ_Score',                                wt = st_contiguity_weights(.),                                significance_cutoff = 0.01)) %>%    select(lisa) %>%    ggplot() +   geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'LISA99') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   ) gzma %>%    mutate(lisa = st_local_bimoran(.,c('OH_Score','IL_Score'),                                wt = st_contiguity_weights(.),                                significance_cutoff = 0.05)) %>%    select(lisa) %>%    ggplot() +   geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'bi-localmoran') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   )"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html","id":"local-geary","dir":"Articles","previous_headings":"","what":"Local Geary","title":"Local Indicators of Spatial Association(LISA)","text":"Local Geary statistic, first outlined Anselin (1995), elaborated upon Anselin (2018), Local Indicator Spatial Association (LISA) uses different measure attribute similarity. global counterpart, focus squared differences, , rather, dissimilarity. words, small values statistics suggest positive spatial autocorrelation, whereas large values suggest negative spatial autocorrelation. Formally, Local Geary statistic \\(LG_i = \\sum_j \\omega_{ij} {(x_i - x_j)}^2\\) usual notation. Inference based conditional permutation procedure interpreted way Local Moran statistic. However, interpretation significant locations terms type association straightforward. essence, attribute similarity cross-product thus direct correspondence slope scatter plot. Nevertheless, can use linking capability within GeoDa make incomplete classification. locations identified significant Local Geary statistic smaller mean, suggest positive spatial autocorrelation (small differences imply similarity). observations can classified upper-right lower-left quadrants matching Moran scatter plot, can identify association high-high low-low. However, given squared difference can cross mean, may observations classification possible. refer positive spatial autocorrelation. negative spatial autocorrelation (large values imply dissimilarity), possible assess whether association high-low low-high outliers, since squaring differences removes sign.","code":"gzma %>%    mutate(lg = st_local_geary(.,'SSQ_Score',                              wt = st_contiguity_weights(.),                              significance_cutoff = 0.01)) %>%    select(lg) %>%    ggplot() +   geom_sf(aes(fill = lg),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'Local Geary') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   )"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html","id":"local-getis-ord-statistics","dir":"Articles","previous_headings":"","what":"Local Getis-Ord Statistics","title":"Local Indicators of Spatial Association(LISA)","text":"third class statistics local spatial autocorrelation suggested Getis Ord (1992), elaborated upon Ord Getis (1995). derived point pattern analysis logic. earliest formulation statistic consisted ratio number observations within given range point total count points. general form, statistic applied values neighboring locations (defined spatial weights). two versions statistic. differ one takes value given location account, . \\(G_i\\) statistic consists ratio weighted average values neighboring locations, sum values, including value location \\(x_i\\). \\[ G_i = \\frac{\\sum_{j\\neq }\\omega_{ij}x_j}{\\sum_{j\\neq }x_j} \\] contrast, \\(G_i^*\\) statistic includes value \\(x_i\\) numerator denominator: \\[ G_i^* = \\frac{\\sum_j\\omega_{ij}x_j}{\\sum_jx_j} \\] Note case, denominator constant across observations simply consists total sum values data set. interpretation Getis-Ord statistics straightforward: value larger mean (, positive value standardized z-value) suggests high-high cluster hot spot, value smaller mean (, negative z-value) indicates low-low cluster cold spot. contrast Local Moran Local Geary statistics, Getis-Ord approach consider spatial outliers. Inference based conditional permutation, using identical procedure statistics.","code":"gzma %>%    mutate(lg = st_local_g(.,'SSQ_Score',                              wt = st_contiguity_weights(.),                              significance_cutoff = 0.05)) %>%    select(lg) %>%    ggplot() +   geom_sf(aes(fill = lg),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'Local G') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   ) gzma %>%    mutate(lg = st_local_gstar(.,'SSQ_Score',                              wt = st_contiguity_weights(.),                              significance_cutoff = 0.05)) %>%    select(lg) %>%    ggplot() +   geom_sf(aes(fill = lg),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'Local Gstar') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   )"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html","id":"local-join-count-statistic","dir":"Articles","previous_headings":"","what":"Local Join Count Statistic","title":"Local Indicators of Spatial Association(LISA)","text":"Recently, Anselin Li (2019) showed constrained version \\(G_i^*\\) statistic yields local version well-known join count statistic spatial autocorrelation binary variables, popularized Cliff Ord (1973). Expressed LISA statistic, local version -called BB join count statistic \\[ BB_i = x_i\\sum_j\\omega_{ij}x_j \\] \\(x_{,j}\\) can take values 1 0, \\(\\omega_{ij}\\) elements binary spatial weights matrix (.e., row-standardized). meaningful results, value 1 chosen case fewest observations (course, definition 1 0 can easily switched). statistic meaningful observations \\(x_i = 1\\), since \\(x_i = 0\\) result always equal zero. pseudo p-value obtained means conditional permutation approach, way local spatial autocorrelation statistics, observations \\(x_i = 1\\). caveats kept mind interpreting results, subject multiple comparisons sensitivity pseudo p-value actual simulation experiment (random seed, number permutations). Technical details provided Anselin Li (2019).","code":"gzma %>%    mutate(lg = st_local_joincount(.,'SSQ_Score',                                  wt = st_contiguity_weights(.),                                  significance_cutoff = 0.05)) %>%    select(lg) %>%    ggplot() +   geom_sf(aes(fill = lg),lwd = .1,color = 'grey') +   scale_fill_lisa(name = 'Local Join Count') +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.title = element_text(size = 5),     legend.text = element_text(size = 5),     legend.key.size = unit(.3, 'cm')   )"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"load-spatial-data-and-nessary-r-package-","dir":"Articles","previous_headings":"","what":"Load spatial data and nessary r package.","title":"Spatial Weights in tidyrgeoda","text":"","code":"library(sf) library(dplyr) library(tidyrgeoda)  guerry = read_sf(system.file(\"extdata\",\"Guerry.shp\",package = \"rgeoda\")) head(guerry) ## Simple feature collection with 6 features and 29 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: 595532 ymin: 1858801 xmax: 975716 ymax: 2564568 ## Projected CRS: NTF (Paris) / Lambert zone II ## # A tibble: 6 × 30 ##   CODE_DE COUNT AVE_ID_  dept Region Dprtmnt     Crm_prs Crm_prp Litercy Donatns ##   <chr>   <dbl>   <dbl> <dbl> <chr>  <chr>         <dbl>   <dbl>   <dbl>   <dbl> ## 1 01          1      49     1 E      Ain           28870   15890      37    5098 ## 2 02          1     812     2 N      Aisne         26226    5521      51    8901 ## 3 03          1    1418     3 C      Allier        26747    7925      13   10973 ## 4 04          1    1603     4 E      Basses-Alp…   12935    7289      46    2733 ## 5 05          1    1802     5 E      Hautes-Alp…   17488    8174      69    6962 ## 6 07          1    2249     7 S      Ardeche        9474   10263      27    3188 ## # ℹ 20 more variables: Infants <dbl>, Suicids <dbl>, MainCty <dbl>, ## #   Wealth <dbl>, Commerc <dbl>, Clergy <dbl>, Crm_prn <dbl>, Infntcd <dbl>, ## #   Dntn_cl <dbl>, Lottery <dbl>, Desertn <dbl>, Instrct <dbl>, Prsttts <dbl>, ## #   Distanc <dbl>, Area <dbl>, Pop1831 <dbl>, TopCrm <dbl>, TopLit <dbl>, ## #   TopWealth <dbl>, geometry <MULTIPOLYGON [m]>"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"contiguity-weights","dir":"Articles","previous_headings":"","what":"Contiguity Weights","title":"Spatial Weights in tidyrgeoda","text":"Contiguity means two spatial units share common border non-zero length. Operationally, can distinguish rook queen criterion contiguity, analogy moves allowed -named pieces chess board. queen criterion somewhat encompassing defines neighbors spatial units sharing common edge common vertex.rook criterion defines neighbors existence common edge two spatial units. create Queen contiguity weights, one can call function queen assigned FALSE,tidyrgeoda invoke rgeoda create Rook contiguity weights. can also create high order contiguity weights changing order 1. Create contiguity weights 1-order 2-order together:","code":"st_contiguity_weights(sfj,queen = TRUE) qw = st_contiguity_weights(guerry) st_summary(qw) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          TRUE               ## 3 \"sparsity:\"               0.0581314878892734 ## 4 \"min neighbors:\"          2                  ## 5 \"max neighbors:\"          8                  ## 6 \"mean neighbors:\"         4.94117647058824   ## 7 \"median neighbors:\"       5                  ## 8 \"has isolates:\"           FALSE rw = st_contiguity_weights(guerry,queen = F) st_summary(rw) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          TRUE               ## 3 \"sparsity:\"               0.0581314878892734 ## 4 \"min neighbors:\"          2                  ## 5 \"max neighbors:\"          8                  ## 6 \"mean neighbors:\"         4.94117647058824   ## 7 \"median neighbors:\"       5                  ## 8 \"has isolates:\"           FALSE rw = st_contiguity_weights(guerry,queen = F,order = 2) st_summary(rw) ## # A tibble: 8 × 2 ##   name                      value             ##   <chr>                     <chr>             ## 1 \"number of observations:\" 85                ## 2 \"is symmetric: \"          TRUE              ## 3 \"sparsity:\"               0.104636678200692 ## 4 \"min neighbors:\"          2                 ## 5 \"max neighbors:\"          14                ## 6 \"mean neighbors:\"         8.89411764705882  ## 7 \"median neighbors:\"       9                 ## 8 \"has isolates:\"           FALSE rw2 = st_contiguity_weights(guerry,queen = F,order = 2,                             include_lower_order = T) st_summary(rw2) ## # A tibble: 8 × 2 ##   name                      value             ##   <chr>                     <chr>             ## 1 \"number of observations:\" 85                ## 2 \"is symmetric: \"          TRUE              ## 3 \"sparsity:\"               0.162768166089965 ## 4 \"min neighbors:\"          4                 ## 5 \"max neighbors:\"          21                ## 6 \"mean neighbors:\"         13.8352941176471  ## 7 \"median neighbors:\"       14                ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"distance-based-weights","dir":"Articles","previous_headings":"","what":"Distance Based Weights","title":"Spatial Weights in tidyrgeoda","text":"straightforward spatial weights matrix constructed distance measure obtained j considered neighbors whenever j falls within critical distance band .can use st_distance_weights() achieve Distance Based Weights. distance threshold default generate use rgeoda::min_distthreshold(),can assign dist_thres argument hand.","code":"dw = st_distance_weights(guerry) st_summary(dw) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          TRUE               ## 3 \"sparsity:\"               0.0434602076124567 ## 4 \"min neighbors:\"          1                  ## 5 \"max neighbors:\"          7                  ## 6 \"mean neighbors:\"         3.69411764705882   ## 7 \"median neighbors:\"       4                  ## 8 \"has isolates:\"           FALSE dw2 = st_distance_weights(guerry,dist_thres = 1.5e5) st_summary(dw2) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          TRUE               ## 3 \"sparsity:\"               0.0968858131487889 ## 4 \"min neighbors:\"          2                  ## 5 \"max neighbors:\"          13                 ## 6 \"mean neighbors:\"         8.23529411764706   ## 7 \"median neighbors:\"       9                  ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"k-nearest-neighbor-weights","dir":"Articles","previous_headings":"","what":"K-Nearest Neighbor Weights","title":"Spatial Weights in tidyrgeoda","text":"special case distance based weights K-Nearest neighbor weights, every observation exactly k neighbors. can used avoid problem isolate distance-band weights smaller cut-distance used. create KNN weights, can call function st_knn_weights():","code":"knn6_w = st_knn_weights(guerry, 6) st_summary(knn6_w) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          FALSE              ## 3 \"sparsity:\"               0.0705882352941176 ## 4 \"min neighbors:\"          6                  ## 5 \"max neighbors:\"          6                  ## 6 \"mean neighbors:\"         6                  ## 7 \"median neighbors:\"       6                  ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"kernel-weights","dir":"Articles","previous_headings":"","what":"Kernel Weights","title":"Spatial Weights in tidyrgeoda","text":"Kernel weights apply kernel function determine distance decay derived continuous weights kernel. kernel weights defined function \\(K_{z}\\) ratio distance \\(d_{ij}\\) \\(\\) \\(j\\), bandwidth \\(h_i\\), \\(z = \\frac{d_{ij}}{h_i}\\). kernel functions include triangular uniform quadratic epanechnikov quartic gaussian Two functions provided tidyrgeoda create kernel weights.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"use-st_kernel_weights-for-kernel-weights-with-afixedbandwidth","dir":"Articles","previous_headings":"Kernel Weights","what":"Use st_kernel_weights() for Kernel Weights with afixedbandwidth","title":"Spatial Weights in tidyrgeoda","text":"","code":"kernel_w = st_kernel_weights(guerry,\"uniform\") st_summary(kernel_w) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          FALSE              ## 3 \"sparsity:\"               0.0434602076124567 ## 4 \"min neighbors:\"          1                  ## 5 \"max neighbors:\"          7                  ## 6 \"mean neighbors:\"         3.69411764705882   ## 7 \"median neighbors:\"       4                  ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"use-st_kernel_knn_weights-for-kernel-weights-with-adaptive-bandwidth","dir":"Articles","previous_headings":"Kernel Weights","what":"Use st_kernel_knn_weights() for Kernel Weights with adaptive bandwidth","title":"Spatial Weights in tidyrgeoda","text":"","code":"adptkernel_w = st_kernel_knn_weights(guerry, 6, \"uniform\") st_summary(adptkernel_w) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          FALSE              ## 3 \"sparsity:\"               0.0705882352941176 ## 4 \"min neighbors:\"          6                  ## 5 \"max neighbors:\"          6                  ## 6 \"mean neighbors:\"         6                  ## 7 \"median neighbors:\"       6                  ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/articles/Spatial-Weights.html","id":"create-spatial-weights-object-by-st_weights","dir":"Articles","previous_headings":"","what":"Create Spatial Weights object by st_weights()","title":"Spatial Weights in tidyrgeoda","text":"st_weights() wrapper function st_*_weights,can use like:","code":"qw = st_weights(guerry,weight = 'contiguity') qw ## Reference class object of class \"Weight\" ## Field \"gda_w\": ## An object of class \"p_GeoDaWeight\" ## Slot \"pointer\": ## <pointer: 0x559407b5a3c0> ##  ## Field \"is_symmetric\": ## [1] TRUE ## Field \"sparsity\": ## [1] 0.05813149 ## Field \"min_neighbors\": ## [1] 2 ## Field \"max_neighbors\": ## [1] 8 ## Field \"num_obs\": ## [1] 85 ## Field \"mean_neighbors\": ## [1] 4.941176 ## Field \"median_neighbors\": ## [1] 5 ## Field \"has_isolates\": ## [1] FALSE st_summary(qw) ## # A tibble: 8 × 2 ##   name                      value              ##   <chr>                     <chr>              ## 1 \"number of observations:\" 85                 ## 2 \"is symmetric: \"          TRUE               ## 3 \"sparsity:\"               0.0581314878892734 ## 4 \"min neighbors:\"          2                  ## 5 \"max neighbors:\"          8                  ## 6 \"mean neighbors:\"         4.94117647058824   ## 7 \"median neighbors:\"       5                  ## 8 \"has isolates:\"           FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lv W (2024). tidyrgeoda: tidy interface rgeoda. R package version 0.1.1, https://spatlyu.github.io/tidyrgeoda/, https://github.com/SpatLyu/tidyrgeoda.","code":"@Manual{,   title = {tidyrgeoda: A tidy interface for rgeoda},   author = {Wenbo Lv},   year = {2024},   note = {R package version 0.1.1, https://spatlyu.github.io/tidyrgeoda/},   url = {https://github.com/SpatLyu/tidyrgeoda}, }"},{"path":"https://spatlyu.github.io/tidyrgeoda/index.html","id":"tidyrgeoda-","dir":"","previous_headings":"","what":"tidyrgeoda | A tidy interface for rgeoda\n","title":"tidyrgeoda | A tidy interface for rgeoda\n","text":"goal tidyrgeoda provide interface rgeoda integrate sf objects tidyverse.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"tidyrgeoda | A tidy interface for rgeoda\n","text":"can install development version tidyrgeoda github: install tidyrgeoda r-universe:","code":"# install.packages(\"devtools\") devtools::install_github(\"SpatLyu/tidyrgeoda\",build_vignettes = T,dep = T) install.packages('tidyrgeoda', repos='https://spatlyu.r-universe.dev')"},{"path":"https://spatlyu.github.io/tidyrgeoda/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"tidyrgeoda | A tidy interface for rgeoda\n","text":"basic example shows use tidyrgeoda create spatial weight matrix calculate local_moran:","code":"library(sf) ## Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.0     ✔ stringr   1.5.1 ## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 ## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 ## ✔ purrr     1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag()    masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(tidyrgeoda) ## Welcome to tidyrgeoda 0.1.0! guerry = read_sf(system.file(\"extdata\",\"Guerry.shp\",package = \"rgeoda\")) guerry %>%    mutate(lisa = st_local_moran(.,'Crm_prs',                                wt = st_weights(.,'contiguity',queen = T))) %>%    select(lisa) -> g_lisa g_lisa ## Simple feature collection with 85 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 ## Projected CRS: NTF (Paris) / Lambert zone II ## # A tibble: 85 × 2 ##    lisa                                                                 geometry ##    <fct>                                                      <MULTIPOLYGON [m]> ##  1 Not significant (((801150 2092615, 800669 2093190, 800688 2095430, 800780 20… ##  2 High-High       (((729326 2521619, 729320 2521230, 729280 2518544, 728751 25… ##  3 High-High       (((710830 2137350, 711746 2136617, 712430 2135212, 712070 21… ##  4 Not significant (((882701 1920024, 882408 1920733, 881778 1921200, 881526 19… ##  5 Not significant (((886504 1922890, 885733 1922978, 885479 1923276, 883061 19… ##  6 Low-Low         (((747008 1925789, 746630 1925762, 745723 1925138, 744216 19… ##  7 Not significant (((818893 2514767, 818614 2514515, 817900 2514467, 817327 25… ##  8 Low-Low         (((509103 1747787, 508820 1747513, 508154 1747093, 505861 17… ##  9 Not significant (((775400 2345600, 775068 2345397, 773587 2345177, 772940 23… ## 10 Low-Low         (((626230 1810121, 626269 1810496, 627494 1811321, 627681 18… ## # ℹ 75 more rows ggplot(data = g_lisa) +   geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +   scale_fill_lisa()"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/gzma.html","id":null,"dir":"Reference","previous_headings":"","what":"Guangzhou Metropolitan Social Space Quality Score Data — gzma","title":"Guangzhou Metropolitan Social Space Quality Score Data — gzma","text":"Data Social Space Quality Score Guangzhou Metropolitan Areas China (2010). actual representation column follows: SName_EN street name; DName_EN district name; SSQ_Score total score social space quality; PS_Score population stability score; EL_Score educational level score; OH_Score occupational hierarchy score; IL_Score income level score; FPOP_Pro proportion foreign population; TenantsPro proportion tenants; NoSchPro proportion schooling; PSchPRO proportion primary school education; JHSchPro proportion junior high school education; HSchDipPro proportion high school diploma; CDegreePro proportion college degree; UnderG_Pro proportion undergraduate; PostG_Pro proportion postgraduate; RPSOPMOPro proportion responsible persons state organs, party mass organizations institutions; PCE_Pro proportion person charge enterprise; ProTechPro proportion professional technical personnel; ClerkPro proportion clerk; BusSer_Pro proportion business service personnel; AFAFP_Pro proportion agriculture, forestry, animal husbandry fishery personnel; OPTE_Pro proportion operators production transportation equipment; UnemPeoPro proportion households unemployed people; B100_Pro proportion households 100 yuan; 100_200Pro proportion households 100-200yuan; 200_500Pro proportion households 200-500yuan; 500_1000P proportion households 500-1000yuan; 1000_1500P proportion households 1000-1500yuan; 1500_2000P proportion households 1500-2000yuan; 2000_3000P proportion households 2000-3000yuan; A3000_Pro proportion households 3000yuan; subdistrict boundary drawn reference Atlas  Community Network ResponsibilityDistrict  Urban Management  Division Guangzhou.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/gzma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guangzhou Metropolitan Social Space Quality Score Data — gzma","text":"","code":"gzma"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/gzma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Guangzhou Metropolitan Social Space Quality Score Data — gzma","text":"gsma: sf tibble social space quality score guangzhou metropolitan areas(2010) 118 rows 32 variables, last column geometry.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/gzma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Guangzhou Metropolitan Social Space Quality Score Data — gzma","text":"WANG Yang, ZHANG Hong’ou, YE Yuyao, WU Qitao, JIN Lixia. Comprehensive Evaluation Distribution Pattern Social Space Quality Guangzhou, China. Tropical Geography.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/read_geoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","title":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","text":"Create spatial weights object geoda file","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/read_geoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","text":"","code":"read_geoda(file_path, id_vec = NULL)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/read_geoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","text":"file_path file paht geoda file. id_vec (optional),id_vec id values used geoda file.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/read_geoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","text":"weights object","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/read_geoda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read A Geoda File(.gal,.gwt,.swm) — read_geoda","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/scale_fill_lisa.html","id":null,"dir":"Reference","previous_headings":"","what":"LISA Fill Scales — scale_fill_lisa","title":"LISA Fill Scales — scale_fill_lisa","text":"Provide ggplot2 fill scales like geoda software.Now achieve using ?ggplot2::scale_fill_manual().Another achieve can see https://stackoverflow.com/questions/43440068/ggplot2-fix-colors--factor-l.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/scale_fill_lisa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LISA Fill Scales — scale_fill_lisa","text":"","code":"scale_fill_lisa(name = \"LISA\", ...)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/scale_fill_lisa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LISA Fill Scales — scale_fill_lisa","text":"name name LISA fill scales legend,default LISA ... Adjust legend details LISA fill scales, like labels adjust appearance legend, see ?ggplot2::scale_fill_manual().","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/scale_fill_lisa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LISA Fill Scales — scale_fill_lisa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/scale_fill_lisa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LISA Fill Scales — scale_fill_lisa","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(ggplot2) guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = read_sf(guerry_path) guerry |>  dplyr::mutate(lisa = st_local_moran(guerry,'Crm_prs')) |>  dplyr::select(lisa) |>  ggplot() +  geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +  scale_fill_lisa()"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":null,"dir":"Reference","previous_headings":"","what":"A greedy algorithm to solve the AZP problem — st_azp_greedy","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"wrapper function rgeoda::azp_greedy().automatic zoning procedure (AZP) initially outlined Openshaw (1977) way address consequences modifiable areal unit problem (MAUP). essence, consists heuristic find best set combinations contiguous spatial units p regions, minimizing within sum squares criterion homogeneity. number regions needs specified beforehand.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"","code":"st_azp_greedy(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   min_bound = 0,   inits = 0,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. min_bound (optional) minimum bound value applies clusters. inits (optional) number construction re-runs, ARiSeL \"automatic regionalization initial seed location\". initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_greedy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A greedy algorithm to solve the AZP problem — st_azp_greedy","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_azp_greedy(guerry,c('Crm_prs','Crm_prp','Litercy', 'Donatns','Infants','Suicids'),5) guerry_clusters #> $Clusters #>  [1] 5 2 3 1 1 1 2 1 2 1 1 1 2 1 4 4 3 4 2 3 3 1 2 1 2 2 3 1 1 1 1 1 3 3 3 1 2 1 #> [39] 2 3 1 3 2 1 1 1 3 3 2 2 3 2 2 3 2 3 2 2 3 2 1 1 1 1 2 2 1 2 3 3 2 2 2 2 4 2 #> [77] 1 1 1 1 4 4 4 2 2 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 47.20703 60.10165 32.71213 57.69760 59.41673 65.49840 #>  #> $`Total within-cluster sum of squares` #> [1] 181.3665 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.3598541 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"wrapper function rgeoda::azp_sa().automatic zoning procedure (AZP) initially outlined Openshaw (1977) way address consequences modifiable areal unit problem (MAUP). essence, consists heuristic find best set combinations contiguous spatial units p regions, minimizing within sum squares criterion homogeneity. number regions needs specified beforehand.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"","code":"st_azp_sa(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   cooling_rate = 0.85,   sa_maxit = 1,   min_bound = 0,   inits = 0,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. cooling_rate (optional) cooling rate simulated annealing algorithm. Defaults 0.85. sa_maxit (optional) number iterations simulated annealing. Defaults 1. min_bound (optional) minimum bound value applies clusters. inits (optional) number construction re-runs, ARiSeL \"automatic regionalization initial seed location\". initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_sa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A simulated annealing algorithm to solve the AZP problem — st_azp_sa","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_azp_sa(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),5) guerry_clusters #> $Clusters #>  [1] 5 2 3 1 1 1 2 1 2 1 1 1 2 1 4 4 3 4 2 3 3 1 2 1 2 2 3 1 1 1 1 1 3 3 3 1 2 1 #> [39] 3 3 1 3 2 1 1 1 3 3 2 2 3 2 2 3 2 3 2 2 3 2 1 1 1 1 2 2 1 2 3 3 2 2 2 2 4 2 #> [77] 1 1 1 1 4 4 4 2 2 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 47.86263 61.08506 29.62824 58.04068 60.31298 66.23291 #>  #> $`Total within-cluster sum of squares` #> [1] 180.8375 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.3588045 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":null,"dir":"Reference","previous_headings":"","what":"A tabu algorithm to solve the AZP problem — st_azp_tabu","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"wrapper function rgeoda::azp_tabu().automatic zoning procedure (AZP) initially outlined Openshaw (1977) way address consequences modifiable areal unit problem (MAUP). essence, consists heuristic find best set combinations contiguous spatial units p regions, minimizing within sum squares criterion homogeneity. number regions needs specified beforehand.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"","code":"st_azp_tabu(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   tabu_length = 10,   conv_tabu = 10,   min_bound = 0,   inits = 0,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. tabu_length (optional) length tabu search heuristic tabu algorithm. Defaults 10. conv_tabu (optional): number non-improving moves. Defaults 10. min_bound (optional) minimum bound value applies clusters. inits (optional) number construction re-runs, ARiSeL \"automatic regionalization initial seed location\". initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_azp_tabu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tabu algorithm to solve the AZP problem — st_azp_tabu","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_azp_tabu(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),5) guerry_clusters #> $Clusters #>  [1] 4 1 2 3 3 3 1 3 1 3 3 3 2 4 2 2 2 2 1 2 4 2 1 3 1 1 2 3 3 3 2 3 2 2 2 3 1 2 #> [39] 2 4 4 2 1 3 2 3 2 2 1 1 2 1 1 2 1 2 1 1 2 1 4 3 3 3 1 1 3 1 4 2 1 1 1 1 5 1 #> [77] 3 3 3 3 5 5 2 1 1 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 52.20796 39.86439 30.75532 54.95106 54.00440 59.41931 #>  #> $`Total within-cluster sum of squares` #> [1] 212.7976 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.4222174 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Spatial Stratification — st_breaks","title":"Univariate Spatial Stratification — st_breaks","text":"Univariate Spatial Stratification invoking rgeoda's *_breaks function.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Spatial Stratification — st_breaks","text":"","code":"st_breaks(sfj, varcol, break_method = \"stddev\", k = 6)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Spatial Stratification — st_breaks","text":"sfj sf, tibble data.frame object varcol variables selected run univariate spatial stratification. break_method (optional) one \"stddev\"(default), \"hinge15\", \"hinge30\", \"percentile\", \"natural\", \"quantile\". break_method \"natural\" \"quantile\", can assign k argument many breaks, methods 6 groups. k (optional)numeric value indicates many breaks,default 6.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Spatial Stratification — st_breaks","text":"vector numeric values computed breaks","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Univariate Spatial Stratification — st_breaks","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate Spatial Stratification — st_breaks","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) st_breaks(guerry,'Crm_prs',break_method = \"quantile\", k = 5) #> [1] 13270.5 17704.5 21476.5 26743.5"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Contiguity Spatial Weights — st_contiguity_weights","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"Create contiguity spatial weights options \"queen\", \"order\", \"include lower order\" \"precision threshold\"","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"","code":"st_contiguity_weights(   sfj,   queen = TRUE,   order = 1,   include_lower_order = FALSE,   precision_threshold = 0 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"sfj sf (simple feature) object. queen (Optional) TRUE (default) FALSE, TRUE implements Queen Contiguity FALSE implements Rook Contiguity. order (Optional) Order contiguity, default 1. include_lower_order (Optional)  Whether lower order neighbors included weights structure,default False. precision_threshold (Optional) precision underlying shape file insufficient allow exact match coordinates determine polygons neighbors,default 0.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_contiguity_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contiguity Spatial Weights — st_contiguity_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) queenw = st_contiguity_weights(guerry,queen = TRUE)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-based Spatial Weights — st_distance_weights","title":"Distance-based Spatial Weights — st_distance_weights","text":"Create distance-based weights","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-based Spatial Weights — st_distance_weights","text":"","code":"st_distance_weights(   sfj,   unit = \"km\",   dist_thres = NULL,   power = 1,   is_inverse = FALSE )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-based Spatial Weights — st_distance_weights","text":"sfj sf (simple feature) object. unit (optional) unit calculating spatial distance, can 'km'(default) 'mile'. dist_thres (optional) positive numeric value distance threshold. power (optional) power (exponent) number indicates many times use number multiplication.Default 1. is_inverse (optional) FALSE (default) TRUE, apply inverse distance value.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-based Spatial Weights — st_distance_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distance-based Spatial Weights — st_distance_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_distance_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-based Spatial Weights — st_distance_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_distance_weights(guerry) #> Reference class object of class \"Weight\" #> Field \"gda_w\": #> An object of class \"p_GeoDaWeight\" #> Slot \"pointer\": #> <pointer: 0x56075ece2ea0> #>  #> Field \"is_symmetric\": #> [1] TRUE #> Field \"sparsity\": #> [1] 0.04346021 #> Field \"min_neighbors\": #> [1] 1 #> Field \"max_neighbors\": #> [1] 7 #> Field \"num_obs\": #> [1] 85 #> Field \"mean_neighbors\": #> [1] 3.694118 #> Field \"median_neighbors\": #> [1] 4 #> Field \"has_isolates\": #> [1] FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"Create kernel weights specifying k-nearest neighbors kernel method","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"","code":"st_kernel_knn_weights(   sfj,   k,   kernel = \"gaussian\",   power = 1,   adaptive_bandwidth = TRUE,   use_kernel_diagonals = FALSE,   is_inverse = FALSE,   unit = \"km\" )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"sfj sf (simple feature) object. k positive integer number k-nearest neighbors. kernel (optional) string value, one 'triangular', 'uniform', 'epanechnikov', 'quartic', 'gaussian'(default). power (optional) power (exponent) number indicates many times use number multiplication.Default 1. adaptive_bandwidth (optional) TRUE (default) FALSE: TRUE use adaptive bandwidth calculated using distance k-nearest neithbors, FALSE use max distance observation k-nearest neighbors. use_kernel_diagonals (optional) FALSE (default) TRUE, apply kernel diagonal weights matrix. is_inverse (optional) FALSE (default) TRUE, apply inverse distance value. unit (optional) unit calculating spatial distance, can 'km'(default) 'mile'.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_knn_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-NN Kernel Spatial Weights — st_kernel_knn_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_kernel_knn_weights(guerry,6) #> Reference class object of class \"Weight\" #> Field \"gda_w\": #> An object of class \"p_GeoDaWeight\" #> Slot \"pointer\": #> <pointer: 0x560751fa7e80> #>  #> Field \"is_symmetric\": #> [1] FALSE #> Field \"sparsity\": #> [1] 0.07058824 #> Field \"min_neighbors\": #> [1] 6 #> Field \"max_neighbors\": #> [1] 6 #> Field \"num_obs\": #> [1] 85 #> Field \"mean_neighbors\": #> [1] 6 #> Field \"median_neighbors\": #> [1] 6 #> Field \"has_isolates\": #> [1] FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-based Kernel Spatial Weights — st_kernel_weights","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"Create kernel weights specifying bandwidth kernel method","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"","code":"st_kernel_weights(   sfj,   kernel = \"gaussian\",   bandwidth = NULL,   power = 1,   use_kernel_diagonals = FALSE,   is_inverse = FALSE,   unit = \"km\" )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"sfj sf (simple feature) object. kernel (optional) string value, one 'triangular', 'uniform', 'epanechnikov', 'quartic', 'gaussian'(default). bandwidth (optional) positive numeric value bandwidth. power (optional) power (exponent) number indicates many times use number multiplication.Default 1. use_kernel_diagonals (optional) FALSE (default) TRUE, apply kernel diagonal weights matrix. is_inverse (optional) FALSE (default) TRUE, apply inverse distance value. unit (optional) unit calculating spatial distance, can 'km'(default) 'mile'.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_kernel_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-based Kernel Spatial Weights — st_kernel_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_kernel_weights(guerry) #> Reference class object of class \"Weight\" #> Field \"gda_w\": #> An object of class \"p_GeoDaWeight\" #> Slot \"pointer\": #> <pointer: 0x56075da21c00> #>  #> Field \"is_symmetric\": #> [1] FALSE #> Field \"sparsity\": #> [1] 0.04346021 #> Field \"min_neighbors\": #> [1] 1 #> Field \"max_neighbors\": #> [1] 7 #> Field \"num_obs\": #> [1] 85 #> Field \"mean_neighbors\": #> [1] 3.694118 #> Field \"median_neighbors\": #> [1] 4 #> Field \"has_isolates\": #> [1] FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"Create k-nearest neighbors based spatial weights","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"","code":"st_knn_weights(sfj, k, power = 1, is_inverse = FALSE, unit = \"km\")"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"sfj sf (simple feature) object. k positive integer number k-nearest neighbors. power (optional) power (exponent) number indicates many times use number multiplication.Default 1. is_inverse (optional) FALSE (default) TRUE, apply inverse distance value. unit (optional) unit calculating spatial distance, can 'km'(default) 'mile'.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_knn_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Nearest Neighbors-based Spatial Weights — st_knn_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_knn_weights(guerry,3) #> Reference class object of class \"Weight\" #> Field \"gda_w\": #> An object of class \"p_GeoDaWeight\" #> Slot \"pointer\": #> <pointer: 0x5607576123d0> #>  #> Field \"is_symmetric\": #> [1] FALSE #> Field \"sparsity\": #> [1] 0.03529412 #> Field \"min_neighbors\": #> [1] 3 #> Field \"max_neighbors\": #> [1] 3 #> Field \"num_obs\": #> [1] 85 #> Field \"mean_neighbors\": #> [1] 3 #> Field \"median_neighbors\": #> [1] 3 #> Field \"has_isolates\": #> [1] FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Lag — st_lag","title":"Spatial Lag — st_lag","text":"Compute spatial lag idx-th observation using selected variable spatial weights matrix","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Lag — st_lag","text":"","code":"st_lag(sfj, varcol, wt = NULL)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Lag — st_lag","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity').","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Lag — st_lag","text":"numeric vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial Lag — st_lag","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Lag — st_lag","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_lag(guerry,'Pop1831') #>  [1] 455.2900 480.3267 382.0433 246.3175 335.2400 324.2800 388.2233 285.0133 #>  [9] 327.8340 303.6340 280.4000 304.6633 485.8033 323.8767 358.7420 405.5440 #> [17] 272.0800 358.1317 329.5114 501.6567 325.4467 367.5271 325.7050 283.0200 #> [25] 459.1650 385.4517 516.1950 297.5033 274.1317 326.6983 389.0975 330.1025 #> [33] 485.7033 270.3450 337.8020 323.5117 370.0660 410.4200 306.6400 430.4057 #> [41] 340.8000 444.7000 311.1014 330.7717 359.4967 321.5680 379.3825 459.0550 #> [49] 322.8817 335.1350 501.0900 417.4475 338.0180 535.1025 477.8900 351.9900 #> [57] 570.6400 491.1167 433.1683 766.8200 300.0600 275.5633 389.4733 261.6250 #> [65] 413.7050 469.1000 452.8700 320.3480 348.6914 345.6550 386.0350 455.2267 #> [73] 441.9037 444.1800 377.7480 649.9140 329.1720 343.9400 251.4933 305.0900 #> [81] 420.2650 325.9483 322.2517 380.5617 306.7860"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Neighbor Match Test — st_lnmt","title":"Local Neighbor Match Test — st_lnmt","text":"local neighbor match test assess extent overlap k-nearest neighbors geographical space k-nearest neighbors multi-attribute space.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Neighbor Match Test — st_lnmt","text":"","code":"st_lnmt(   sfj,   varcol,   k,   unit = \"km\",   scale_method = \"standardize\",   distance_method = \"euclidean\",   power = 1,   is_inverse = FALSE )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Neighbor Match Test — st_lnmt","text":"sfj sf (simple feature) object. varcol variables selected run local neighbor match test. k positive integer number k-nearest neighbors searching. unit (optional) unit calculating spatial distance, can 'km'(default) 'mile'. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) type distance metrics used measure distance input data. Options 'euclidean', 'manhattan'. Default 'euclidean'. power (optional) power (exponent) number says many times use number multiplication. is_inverse (optional) FALSE (default) TRUE, apply inverse distance value.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Neighbor Match Test — st_lnmt","text":"tibble two columns \"Cardinality\" \"Probability\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Neighbor Match Test — st_lnmt","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_lnmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Neighbor Match Test — st_lnmt","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\",\"Guerry.shp\",package = \"rgeoda\")) st_lnmt(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),6) #> # A tibble: 85 × 2 #>    Cardinality Probability #>          <int>       <dbl> #>  1           2     0.0526  #>  2           3     0.00374 #>  3           2     0.0526  #>  4           2     0.0526  #>  5           0    NA       #>  6           1     0.312   #>  7           1     0.312   #>  8           2     0.0526  #>  9           3     0.00374 #> 10           1     0.312   #> # ℹ 75 more rows"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate Local Join Count Statistics — st_local_bijoincount","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"Function apply local Bivariate Join Count statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"","code":"st_local_bijoincount(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bijoincount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate Local Join Count Statistics — st_local_bijoincount","text":"","code":"library(magrittr) guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) %>% dplyr::mutate(InvCrm = 1 - TopCrm) st_local_bijoincount(guerry,c(\"TopCrm\", \"InvCrm\")) #>  [1] Not significant Significant     Significant     Not significant #>  [5] Not significant Not significant Significant     Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Not significant Significant     Significant     #> [21] Not significant Not significant Not significant Not significant #> [25] Not significant Not significant Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Significant     Not significant Not significant Not significant #> [41] Not significant Not significant Not significant Not significant #> [45] Not significant Not significant Not significant Not significant #> [49] Not significant Not significant Significant     Not significant #> [53] Significant     Not significant Not significant Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Not significant Not significant Not significant Not significant #> [65] Not significant Not significant Not significant Not significant #> [69] Significant     Not significant Not significant Not significant #> [73] Not significant Not significant Not significant Significant     #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Not significant Not significant #> [85] Not significant #> Levels: Not significant Significant Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate Local Moran Statistics — st_local_bimoran","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"Function apply bivariate local Moran statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"","code":"st_local_bimoran(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_bimoran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate Local Moran Statistics — st_local_bimoran","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_bimoran(guerry,c('Crm_prs','Litercy')) #>  [1] Not significant High-High       High-Low        Not significant #>  [5] Not significant Not significant High-High       Not significant #>  [9] Low-High        Not significant Not significant Not significant #> [13] Not significant Low-Low         Not significant Not significant #> [17] High-Low        Low-Low         High-High       High-Low        #> [21] High-Low        High-Low        Low-High        Not significant #> [25] Not significant Not significant High-Low        Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] High-Low        High-Low        Low-Low         Not significant #> [37] High-High       Not significant Not significant High-Low        #> [41] Low-Low         Low-Low         Not significant Low-Low         #> [45] Not significant Not significant High-Low        Not significant #> [49] Low-High        High-High       Not significant High-High       #> [53] High-High       High-Low        Low-High        Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Low-Low         Not significant Not significant Not significant #> [65] Low-High        Low-High        Not significant High-High       #> [69] Not significant Not significant Not significant Not significant #> [73] High-High       Low-High        Not significant Not significant #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Low-Low         Low-Low         Low-High        #> [85] Not significant #> 7 Levels: Not significant High-High Low-Low Low-High High-Low ... Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Getis-Ord's G Statistics — st_local_g","title":"Local Getis-Ord's G Statistics — st_local_g","text":"Function apply Getis-Ord's local G statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Getis-Ord's G Statistics — st_local_g","text":"","code":"st_local_g(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Getis-Ord's G Statistics — st_local_g","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Getis-Ord's G Statistics — st_local_g","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Getis-Ord's G Statistics — st_local_g","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Getis-Ord's G Statistics — st_local_g","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_g(guerry,'Crm_prp') #>  [1] Not significant Not significant High-High       Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant High-High       Not significant Not significant #> [17] Not significant High-High       Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Low-Low         Low-Low         Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant High-High       #> [41] High-High       Not significant Not significant Not significant #> [45] Not significant High-High       Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Low-Low         Not significant Not significant #> [61] High-High       Not significant Not significant Not significant #> [65] Not significant Not significant High-High       Not significant #> [69] Not significant Not significant Low-Low         Not significant #> [73] Low-Low         Low-Low         Not significant Low-Low         #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant High-High       Not significant #> [85] Not significant #> Levels: Not significant High-High Low-Low Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Geary Statistics — st_local_geary","title":"Local Geary Statistics — st_local_geary","text":"Function apply local Geary statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Geary Statistics — st_local_geary","text":"","code":"st_local_geary(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Geary Statistics — st_local_geary","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Geary Statistics — st_local_geary","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Geary Statistics — st_local_geary","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_geary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Geary Statistics — st_local_geary","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_geary(guerry,'Crm_prp') #>  [1] Not significant Low-Low         Negative        Not significant #>  [5] Other Positive  Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Not significant Not significant Low-Low         #> [21] High-High       Not significant Not significant Not significant #> [25] Low-Low         Low-Low         Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Negative        Not significant Not significant #> [37] Not significant Not significant Not significant Not significant #> [41] High-High       Not significant Not significant Not significant #> [45] High-High       Not significant Not significant Not significant #> [49] Not significant Not significant Other Positive  Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Not significant Not significant Not significant Not significant #> [65] Not significant Not significant Not significant Not significant #> [69] Not significant Not significant Low-Low         Not significant #> [73] Not significant Low-Low         Not significant Not significant #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Negative        Not significant #> [85] Not significant #> 7 Levels: Not significant High-High Low-Low Other Positive ... Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Getis-Ord's G* Statistics — st_local_gstar","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"Function apply Getis-Ord's local G*statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"","code":"st_local_gstar(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_gstar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Getis-Ord's G* Statistics — st_local_gstar","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_gstar(guerry,'Crm_prp') #>  [1] Not significant Not significant High-High       Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant High-High       Not significant Not significant #> [17] Not significant High-High       Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Low-Low         Low-Low         Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant High-High       #> [41] High-High       Not significant Not significant Not significant #> [45] Not significant High-High       Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Low-Low         Not significant Not significant #> [61] High-High       Not significant Not significant Not significant #> [65] Not significant Not significant High-High       Not significant #> [69] Not significant Not significant Low-Low         Not significant #> [73] Low-Low         Low-Low         Not significant Low-Low         #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant High-High       Not significant #> [85] Not significant #> Levels: Not significant High-High Low-Low Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Join Count Statistics — st_local_joincount","title":"Local Join Count Statistics — st_local_joincount","text":"Function apply local Join Count statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Join Count Statistics — st_local_joincount","text":"","code":"st_local_joincount(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Join Count Statistics — st_local_joincount","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Join Count Statistics — st_local_joincount","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Join Count Statistics — st_local_joincount","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_joincount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Join Count Statistics — st_local_joincount","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_joincount(guerry,'Crm_prp') #>  [1] Not significant Not significant Significant     Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant Significant     Not significant Not significant #> [17] Not significant Significant     Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Significant     Significant     Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant Significant     #> [41] Significant     Not significant Not significant Not significant #> [45] Not significant Significant     Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Significant     Not significant Not significant #> [61] Significant     Not significant Not significant Not significant #> [65] Not significant Not significant Significant     Not significant #> [69] Not significant Not significant Significant     Not significant #> [73] Significant     Significant     Not significant Significant     #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Significant     Not significant #> [85] Not significant #> Levels: Not significant Significant Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Moran Statistics — st_local_moran","title":"Local Moran Statistics — st_local_moran","text":"Function apply local Moran statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Moran Statistics — st_local_moran","text":"","code":"st_local_moran(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Moran Statistics — st_local_moran","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Moran Statistics — st_local_moran","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Moran Statistics — st_local_moran","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Moran Statistics — st_local_moran","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_moran(guerry,'Crm_prp') #>  [1] Not significant Not significant High-High       Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant High-High       Not significant Not significant #> [17] Not significant High-High       Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Low-Low         Low-Low         Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant High-High       #> [41] High-High       Not significant Not significant Not significant #> [45] Not significant Low-High        Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Low-Low         Not significant Not significant #> [61] High-High       Not significant Not significant Not significant #> [65] Not significant Not significant Low-High        Not significant #> [69] Not significant Not significant Low-Low         Not significant #> [73] Low-Low         Low-Low         Not significant Low-Low         #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Low-High        Not significant #> [85] Not significant #> 7 Levels: Not significant High-High Low-Low Low-High High-Low ... Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"Function apply local Moran EB Rate statistics. EB rate first computed \"event\" \"base\" variables, used local moran statistics.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"","code":"st_local_moran_eb(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_moran_eb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Moran with Empirical Bayes(EB) Rate — st_local_moran_eb","text":"","code":"if (FALSE) { guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_moran_eb(guerry,c(\"hr60\", \"po60\")) }"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Multivariate Geary Statistics — st_local_multigeary","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"Function apply local Multivariate Geary statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"","code":"st_local_multigeary(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"sfj sf (simple feature) object. varcol variables selected calculate spatial lag, character vector. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multigeary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Multivariate Geary Statistics — st_local_multigeary","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_multigeary(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns','Infants', 'Suicids')) #>  [1] Not significant Positive        Positive        Positive        #>  [5] Not significant Positive        Positive        Positive        #>  [9] Positive        Positive        Positive        Positive        #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Positive        Positive        Positive        #> [21] Positive        Positive        Not significant Not significant #> [25] Positive        Positive        Positive        Positive        #> [29] Not significant Positive        Not significant Not significant #> [33] Positive        Not significant Not significant Not significant #> [37] Not significant Not significant Positive        Not significant #> [41] Positive        Negative        Positive        Positive        #> [45] Positive        Not significant Not significant Not significant #> [49] Positive        Positive        Positive        Not significant #> [53] Positive        Positive        Not significant Not significant #> [57] Positive        Positive        Not significant Positive        #> [61] Positive        Not significant Positive        Not significant #> [65] Positive        Positive        Not significant Positive        #> [69] Not significant Positive        Positive        Not significant #> [73] Positive        Positive        Not significant Positive        #> [77] Positive        Positive        Positive        Positive        #> [81] Not significant Positive        Not significant Positive        #> [85] Positive        #> Levels: Not significant Positive Negative Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":null,"dir":"Reference","previous_headings":"","what":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"Function apply (multivariate) colocation local Join Count statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"","code":"st_local_multijoincount(   sfj,   varcol,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multijoincount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Multivariate) Colocation Local Join Count Statistics — st_local_multijoincount","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_multijoincount(guerry,c('TopWealth','TopWealth', 'TopLit')) #>  [1] Not significant Not significant Not significant Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Not significant Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Not significant Not significant Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant Not significant #> [41] Not significant Not significant Not significant Not significant #> [45] Not significant Not significant Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Not significant Not significant Not significant Not significant #> [65] Not significant Not significant Not significant Not significant #> [69] Not significant Not significant Not significant Not significant #> [73] Not significant Not significant Not significant Not significant #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Not significant Not significant #> [85] Not significant #> Levels: Not significant Significant Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"Function apply multivariate quantile LISA statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"","code":"st_local_multiquantilelisa(   sfj,   varcol,   k,   q,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k value indicates number quantiles. Value range e.g. [1, 10]. q value indicates quantile interval used local join count statistics. Value stars 1. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_multiquantilelisa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Quantile LISA Statistics — st_local_multiquantilelisa","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_multiquantilelisa(guerry,c(\"Crm_prp\", \"Litercy\"),c(4,4), c(1,1)) #>  [1] Not significant Not significant Not significant Not significant #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Not significant Not significant #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Not significant Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Not significant Not significant Not significant Not significant #> [29] Not significant Not significant Not significant Not significant #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant Not significant #> [41] Not significant Not significant Not significant Not significant #> [45] Not significant Not significant Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Not significant Not significant Not significant Not significant #> [65] Not significant Not significant Not significant Not significant #> [69] Not significant Not significant Not significant Not significant #> [73] Not significant Not significant Not significant Not significant #> [77] Not significant Not significant Not significant Not significant #> [81] Not significant Not significant Not significant Not significant #> [85] Not significant #> Levels: Not significant Significant Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile LISA Statistics — st_local_quantilelisa","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"Function apply quantile LISA statistics","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"","code":"st_local_quantilelisa(   sfj,   varcol,   k,   q,   wt = NULL,   permutations = 999,   permutation_method = \"complete\",   significance_cutoff = 0.05,   cpu_threads = 6,   seed = 123456789 )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k value indicates number quantiles. Value range e.g. [1, 10]. q value indicates quantile interval used local join count statistics. Value stars 1. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). permutations (optional) number permutations LISA computation. permutation_method (optional) permutation method used LISA computation. Options 'complete', 'lookup'. Default 'complete'. significance_cutoff (optional) cutoff value significance p-values filter -significant clusters. cpu_threads (optional) number cpu threads used parallel LISA computation. seed (optional) seed random number generator.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"factor vector.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_local_quantilelisa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile LISA Statistics — st_local_quantilelisa","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_local_quantilelisa(guerry,\"Crm_prs\",k = 4, q = 1) #>  [1] Not significant Not significant Not significant Significant     #>  [5] Not significant Not significant Not significant Not significant #>  [9] Not significant Not significant Significant     Significant     #> [13] Not significant Not significant Not significant Not significant #> [17] Not significant Not significant Not significant Not significant #> [21] Not significant Not significant Not significant Not significant #> [25] Not significant Not significant Not significant Significant     #> [29] Not significant Not significant Not significant Significant     #> [33] Not significant Not significant Not significant Not significant #> [37] Not significant Not significant Not significant Not significant #> [41] Not significant Not significant Not significant Not significant #> [45] Not significant Not significant Not significant Not significant #> [49] Not significant Not significant Not significant Not significant #> [53] Not significant Not significant Not significant Not significant #> [57] Not significant Not significant Not significant Not significant #> [61] Not significant Not significant Not significant Not significant #> [65] Not significant Not significant Not significant Not significant #> [69] Not significant Not significant Not significant Not significant #> [73] Not significant Not significant Not significant Not significant #> [77] Not significant Not significant Significant     Significant     #> [81] Not significant Not significant Not significant Not significant #> [85] Not significant #> Levels: Not significant Significant Undefined Isolated"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":null,"dir":"Reference","previous_headings":"","what":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"wrapper function rgeoda::maxp_greedy().max-p-region problem special case constrained clustering finite number geographical areas aggregated maximum number regions (max-p-regions), region geographically connected clusters maximize internal homogeneity.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"","code":"st_maxp_greedy(   sfj,   varcol,   wt = NULL,   boundvar,   min_bound,   iterations = 99,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   cpu_threads = 6,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar numeric vector selected bounding variable. min_bound minimum value sum value bounding variable int cluster greater . iterations (optional) number iterations greedy algorithm. Defaults 99. initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. cpu_threads (optional) number cpu threads used parallel computation.Default 6. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_greedy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A greedy algorithm to solve the max-p-region problem — st_maxp_greedy","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_maxp_greedy(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),boundvar = 'Pop1831',min_bound = 3236.67) guerry_clusters #> $Clusters #>  [1] 7 2 7 1 1 1 2 3 6 3 1 1 8 7 4 4 5 7 2 4 7 3 6 1 8 8 4 1 3 3 3 1 4 5 5 7 2 3 #> [39] 5 7 7 4 8 1 3 1 5 5 6 6 5 6 2 4 6 5 2 2 5 8 7 3 3 3 6 6 2 6 2 5 8 8 2 8 4 8 #> [77] 1 1 1 1 4 4 4 6 2 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 44.39253 37.80089 28.19168 53.09362 48.11754 48.21628 #>  #> $`Total within-cluster sum of squares` #> [1] 244.1875 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.4844989 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"wrapper function rgeoda::maxp_sa().max-p-region problem special case constrained clustering finite number geographical areas aggregated maximum number regions (max-p-regions), region geographically connected clusters maximize internal homogeneity.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"","code":"st_maxp_sa(   sfj,   varcol,   wt = NULL,   boundvar,   min_bound,   cooling_rate = 0.85,   sa_maxit = 1,   iterations = 99,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   cpu_threads = 6,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar numeric vector selected bounding variable. min_bound minimum value sum value bounding variable int cluster greater . cooling_rate (optional) cooling rate simulated annealing algorithm. Defaults 0.85. sa_maxit (optional) number iterations simulated annealing. Defaults 1. iterations (optional) number iterations greedy algorithm. Defaults 99. initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. cpu_threads (optional) number cpu threads used parallel computation.Default 6. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_sa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A simulated annealing algorithm to solve the max-p-region problem — st_maxp_sa","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_maxp_sa(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),boundvar = 'Pop1831',min_bound = 3236.67) guerry_clusters #> $Clusters #>  [1] 2 3 7 5 5 7 3 1 6 1 7 5 8 7 4 4 2 7 3 4 7 7 6 5 8 8 4 5 1 1 1 5 4 2 2 5 3 1 #> [39] 2 7 7 4 8 1 1 5 2 2 6 6 2 6 3 4 6 2 3 3 2 3 7 1 1 1 6 6 5 6 2 2 8 8 3 8 4 3 #> [77] 1 1 5 5 4 4 4 6 3 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 44.78939 44.22570 24.40716 52.89492 50.78755 36.79676 #>  #> $`Total within-cluster sum of squares` #> [1] 250.0985 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.4962272 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":null,"dir":"Reference","previous_headings":"","what":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"wrapper function rgeoda::maxp_tabu().max-p-region problem special case constrained clustering finite number geographical areas aggregated maximum number regions (max-p-regions), region geographically connected clusters maximize internal homogeneity.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"","code":"st_maxp_tabu(   sfj,   varcol,   wt = NULL,   boundvar,   min_bound,   tabu_length = 10,   conv_tabu = 10,   iterations = 99,   initial_regions = vector(\"numeric\"),   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   cpu_threads = 6,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar numeric vector selected bounding variable. min_bound minimum value sum value bounding variable int cluster greater . tabu_length (optional) length tabu search heuristic tabu algorithm. Defaults 10. conv_tabu (optional): number non-improving moves. Defaults 10. iterations (optional) number iterations greedy algorithm. Defaults 99. initial_regions (optional) initial regions local search starts . Default empty. means local search starts random process \"grow\" clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance betwen observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\" seed (optional) seed random number generator. Defaults 123456789. cpu_threads (optional) number cpu threads used parallel computation.Default 6. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_maxp_tabu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tabu-search algorithm to solve the max-p-region problem — st_maxp_tabu","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_maxp_tabu(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns', 'Infants','Suicids'),boundvar = 'Pop1831',min_bound = 3236.67) guerry_clusters #> $Clusters #>  [1] 2 5 1 3 3 1 5 1 4 1 1 3 6 1 2 7 2 7 5 8 2 7 4 3 6 6 8 3 1 1 7 3 8 2 7 3 5 7 #> [39] 2 2 1 8 6 1 7 3 2 2 4 5 8 4 4 8 4 2 5 5 2 6 1 1 1 1 4 4 3 4 2 2 6 6 5 6 2 6 #> [77] 1 1 3 3 8 7 7 4 5 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 37.71292 53.00122 24.16448 61.51004 53.23544 33.45476 #>  #> $`Total within-cluster sum of squares` #> [1] 240.9211 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.4780181 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":null,"dir":"Reference","previous_headings":"","what":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"wrapper function rgeoda::redcap().REDCAP (Regionalization dynamically constrained agglomerative clustering partitioning) developed D. Guo (2008). Like SKATER, REDCAP starts building spanning tree 4 different ways (single-linkage, average-linkage, ward-linkage complete-linkage). single-linkage way leads build minimum spanning tree. ,REDCAP provides 2 different ways (first-order full-order constraining) prune tree find clusters. first-order approach minimum spanning tree exactly SKATER. GeoDa pygeoda, following methods provided: \\* First-order Single-linkage \\* Full-order Complete-linkage \\* Full-order Average-linkage \\* Full-order Single-linkage \\* Full-order Ward-linkage.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"","code":"st_redcap(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   method = \"fullorder-averagelinkage\",   min_bound = 0,   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   cpu_threads = 6,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. method (optional) \"firstorder-singlelinkage\", \"fullorder-completelinkage\", \"fullorder-averagelinkage\"(default),\"fullorder-singlelinkage\", \"fullorder-wardlinkage\" min_bound (optional) minimum bound value applies clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\". seed (int,optional) seed random number generator. Defaults 123456789. cpu_threads (optional) number cpu threads used parallel computation. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_redcap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regionalization with dynamically constrained agglomerative clustering and partitioning(REDCAP) — st_redcap","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_redcap(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns','Infants','Suicids'), 4,method = \"fullorder-completelinkage\") guerry_clusters #> $Clusters #>  [1] 1 2 1 3 3 1 2 3 2 3 3 3 2 1 1 1 1 1 2 1 1 1 2 3 2 2 1 3 3 3 3 3 1 1 1 3 2 3 #> [39] 1 1 4 1 2 3 3 3 1 1 2 2 1 2 2 1 2 1 2 2 1 2 1 3 3 3 2 2 3 2 1 1 2 2 2 2 1 2 #> [77] 3 3 3 3 1 1 1 2 2 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 59.33033 55.01580 28.20272 68.58974 61.27232 54.63519 #>  #> $`Total within-cluster sum of squares` #> [1] 176.9539 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.351099 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"wrapper function rgeoda::schc().Spatially constrained hierarchical clustering special form constrained clustering, constraint based contiguity (common borders). method builds clusters using agglomerative hierarchical clustering methods: single linkage, complete linkage, average linkage Ward's method (special form centroid linkage). Meanwhile, also maintains spatial contiguity merging two clusters.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"","code":"st_schc(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   method = \"average\",   min_bound = 0,   scale_method = \"standardize\",   distance_method = \"euclidean\",   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. method (optional) \"single\", \"complete\", \"average\"(default),\"ward\". min_bound (optional) minimum bound value applies clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\". rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_schc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatially Constrained Hierarchical Clucstering (SCHC) — st_schc","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_schc(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns','Infants','Suicids'), 4,method = \"complete\") guerry_clusters #> $Clusters #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 78.13831 54.75868 81.49771 63.48675 80.60111 65.74389 #>  #> $`Total within-cluster sum of squares` #> [1] 79.77355 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.1582809 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"wrapper function rgeoda::skater().SKATER forms clusters spatially partitioning data similar values features interest.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"","code":"st_skater(   sfj,   varcol,   k,   wt = NULL,   boundvar = NULL,   min_bound = 0,   scale_method = \"standardize\",   distance_method = \"euclidean\",   seed = 123456789,   cpu_threads = 6,   rdist = numeric() )"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"sfj sf (simple feature) object. varcol variable selected calculate spatial lag, character. k number clusters. wt (optional) spatial weights object,can use st_weights() construct,default constructed st_weights(sfj,'contiguity'). boundvar (optional) data frame / tibble selected bound variable. min_bound (optional) minimum bound value applies clusters. scale_method (optional) One scaling methods 'raw', 'standardize', 'demean', 'mad', 'range_standardize', 'range_adjust' apply input data. Default 'standardize' (Z-score normalization). distance_method (optional) distance method used compute distance observation j. Defaults \"euclidean\". Options \"euclidean\" \"manhattan\". seed (int,optional) seed random number generator. Defaults 123456789. cpu_threads (optional) number cpu threads used parallel computation. rdist (optional) distance matrix (lower triangular matrix, column wise storage).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"names list names \"Clusters\", \"Total sum squares\", \"Within-cluster sum squares\", \"Total within-cluster sum squares\", \"ratio total sum squares\".","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_skater.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial C(K)luster Analysis by Tree Edge Removal(SKATER) — st_skater","text":"","code":"library(sf) guerry = read_sf(system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\")) guerry_clusters = st_skater(guerry,c('Crm_prs','Crm_prp','Litercy','Donatns','Infants','Suicids'),4) guerry_clusters #> $Clusters #>  [1] 3 2 3 1 1 1 2 1 2 1 1 1 2 1 1 3 3 3 2 4 3 1 2 1 2 2 4 1 1 1 1 1 4 3 4 1 2 1 #> [39] 4 3 3 4 2 1 1 1 4 4 2 2 4 2 2 4 2 3 2 2 4 2 3 1 1 1 2 2 1 2 3 4 2 2 2 2 3 2 #> [77] 1 1 1 1 3 3 3 2 2 #>  #> $`Total sum of squares` #> [1] 504 #>  #> $`Within-cluster sum of squares` #> [1] 57.89077 59.95242 28.72571 69.38030 62.30781 66.65809 #>  #> $`Total within-cluster sum of squares` #> [1] 159.0849 #>  #> $`The ratio of between to total sum of squares` #> [1] 0.3156447 #>"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Spatial Weights — st_summary","title":"Summary of Spatial Weights — st_summary","text":"Warpping summary() function spatial weights","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Spatial Weights — st_summary","text":"","code":"st_summary(wt, ...)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Spatial Weights — st_summary","text":"wt Weight object ... summary optional parameters","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Spatial Weights — st_summary","text":"summary description instance Weight-class","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of Spatial Weights — st_summary","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Spatial Weights — st_summary","text":"","code":"if (FALSE) { library(sf) guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = read_sf(guerry_path) queen_w = tidyrgeoda::st_weights(guerry,'contiguity') st_summary(queen_w) }"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Spatial Weights — st_weights","title":"Construct Spatial Weights — st_weights","text":"Create spatial weights","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Spatial Weights — st_weights","text":"","code":"st_weights(sfj, weight = NULL, ...)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Spatial Weights — st_weights","text":"sfj sf (simple feature) object. weight method used create spatial weights,one 'contiguity', 'distance', 'knn', 'kernel', 'kernel_knn'. ... arguments construct spatial weight, see 'tidyrgeoda::st_contiguity_weights','tidyrgeoda::st_distance_weights', 'tidyrgeoda::st_knn_weights','tidyrgeoda::st_kernel_weights', 'tidyrgeoda::st_kernel_knn_weights'.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Spatial Weights — st_weights","text":"instance rgeoda Weight-class.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct Spatial Weights — st_weights","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/st_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Spatial Weights — st_weights","text":"","code":"guerry_path = system.file(\"extdata\", \"Guerry.shp\", package = \"rgeoda\") guerry = sf::read_sf(guerry_path) st_weights(guerry,'kernel_knn',6) #> Reference class object of class \"Weight\" #> Field \"gda_w\": #> An object of class \"p_GeoDaWeight\" #> Slot \"pointer\": #> <pointer: 0x56075675cd10> #>  #> Field \"is_symmetric\": #> [1] FALSE #> Field \"sparsity\": #> [1] 0.07058824 #> Field \"min_neighbors\": #> [1] 6 #> Field \"max_neighbors\": #> [1] 6 #> Field \"num_obs\": #> [1] 85 #> Field \"mean_neighbors\": #> [1] 6 #> Field \"median_neighbors\": #> [1] 6 #> Field \"has_isolates\": #> [1] FALSE"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/write_geoda.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Spatial Weights — write_geoda","title":"Save Spatial Weights — write_geoda","text":"Save spatial weights file","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/write_geoda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Spatial Weights — write_geoda","text":"","code":"write_geoda(wt, dsn, layer = NULL, id_vec = NULL)"},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/write_geoda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Spatial Weights — write_geoda","text":"wt Weight object dsn path output weights file layer (optional) name layer input dataset,efault \"\". id_vec (optional) Defines unique value observation saving weights file. Default tibble::tibble(id_v = 1:wt$num_obs).","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/write_geoda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Spatial Weights — write_geoda","text":"boolean value indicates save successfully failed","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/reference/write_geoda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save Spatial Weights — write_geoda","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/news/index.html","id":"tidyrgeoda-development-version","dir":"Changelog","previous_headings":"","what":"tidyrgeoda (development version)","title":"tidyrgeoda (development version)","text":"Fix potential bugs make tidyrgeoda work properly.","code":""},{"path":"https://spatlyu.github.io/tidyrgeoda/news/index.html","id":"tidyrgeoda-011","dir":"Changelog","previous_headings":"","what":"tidyrgeoda 0.1.1","title":"tidyrgeoda 0.1.1","text":"Basically stable function.","code":""}]
